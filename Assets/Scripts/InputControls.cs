//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""MouseControls"",
            ""id"": ""f8573af4-c542-46eb-8fc4-f3efa43804c1"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""a2b5b0c5-972a-46c4-a80d-baf463d0f5b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pouse"",
                    ""type"": ""Button"",
                    ""id"": ""d5359a92-622c-4615-9271-3c5b0cdff0cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1a5bd67-f824-4cda-8c92-2cb3cb918028"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b693d54a-a87e-4e18-b4d3-ca3f6c40dcbf"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouseControls
        m_MouseControls = asset.FindActionMap("MouseControls", throwIfNotFound: true);
        m_MouseControls_Click = m_MouseControls.FindAction("Click", throwIfNotFound: true);
        m_MouseControls_Pouse = m_MouseControls.FindAction("Pouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseControls
    private readonly InputActionMap m_MouseControls;
    private IMouseControlsActions m_MouseControlsActionsCallbackInterface;
    private readonly InputAction m_MouseControls_Click;
    private readonly InputAction m_MouseControls_Pouse;
    public struct MouseControlsActions
    {
        private @InputControls m_Wrapper;
        public MouseControlsActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_MouseControls_Click;
        public InputAction @Pouse => m_Wrapper.m_MouseControls_Pouse;
        public InputActionMap Get() { return m_Wrapper.m_MouseControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseControlsActions set) { return set.Get(); }
        public void SetCallbacks(IMouseControlsActions instance)
        {
            if (m_Wrapper.m_MouseControlsActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnClick;
                @Pouse.started -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnPouse;
                @Pouse.performed -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnPouse;
                @Pouse.canceled -= m_Wrapper.m_MouseControlsActionsCallbackInterface.OnPouse;
            }
            m_Wrapper.m_MouseControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Pouse.started += instance.OnPouse;
                @Pouse.performed += instance.OnPouse;
                @Pouse.canceled += instance.OnPouse;
            }
        }
    }
    public MouseControlsActions @MouseControls => new MouseControlsActions(this);
    public interface IMouseControlsActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnPouse(InputAction.CallbackContext context);
    }
}
